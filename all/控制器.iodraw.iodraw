<mxfile host="www.iodraw.com" agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:136.0) Gecko/20100101 Firefox/136.0" version="24.7.17">
  <diagram name="第 1 页" id="tff7HQ_WmHDC0ZlMoCYw">
    <mxGraphModel dx="3617" dy="1427" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" background="none" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="IF1k4MAVBQgVod45AsEC-1" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;Controller类&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot; style=&quot;font-size: 18px;&quot;&gt;所有虚函数均需要重写，主要分为两类：&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot; style=&quot;font-size: 18px;&quot;&gt;1、状态方面函数，如configure；&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot; style=&quot;font-size: 18px;&quot;&gt;2、功能方面函数，如setPlan函数、computeVelocityCommands函数。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;align=left;" parent="1" vertex="1">
          <mxGeometry x="-827" y="59" width="610" height="140" as="geometry" />
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-2" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;GoalChecker类&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;关键函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;1、isGoalreached函数，检测是否到达目标点；&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;2、getTolerances函数，决定目标到达的容差，包括位置和速度容差；&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;3、状态方面函数，如reset。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;align=left;" vertex="1" parent="1">
          <mxGeometry x="-827" y="493" width="610" height="150" as="geometry" />
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-5" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;ProgressChecker类&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;关键函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;1、check函数，检测较之前，机器人是否有移动；&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot;&gt;2、状态方面函数，如initialize函数。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Ee7jRx3x6yneVU9Ms_JW&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;align=left;" vertex="1" parent="1">
          <mxGeometry x="-827" y="730" width="610" height="120" as="geometry" />
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-8" value="" style="endArrow=classic;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="-217" y="789.41" as="sourcePoint" />
            <mxPoint x="-77" y="789.41" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-10" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;子类&lt;/font&gt;" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];" vertex="1" connectable="0" parent="aFz14AopOHoSZA2ScoIg-8">
          <mxGeometry x="-0.0118" y="1" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-9" value="&lt;div align=&quot;left&quot; style=&quot;font-weight: normal; font-size: 18px; line-height: 24px; white-space: pre;&quot;&gt;&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;SimpleProgressChecker&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;1、initialize函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;声明两个参数，movement_time_allowance和required_movement_radius，后者&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;表示机器人在一定时间内必须移动的最小距离，以确认机器人没有卡住；前&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;者表示允许机器人在没有达到上述移动距离的情况下继续尝试的时间，若超&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;时，可能会触发恢复行为。&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;另外，有动态更新上述参数的回调函数，好处是不用重启节点。&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;2、check函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;检测机器人在导航过程中是否有足够的进展，检查机器人移动的距离，若大&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;于阈值（&lt;/font&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;required_movement_radius&lt;/font&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;），则更新基准衡量位姿。&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#ffffff;align=left;" vertex="1" parent="1">
          <mxGeometry x="-76" y="730" width="600" height="292.5" as="geometry" />
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-12" value="" style="endArrow=classic;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="-216" y="567.41" as="sourcePoint" />
            <mxPoint x="-76" y="567.41" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-13" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;子类&lt;/font&gt;" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];" vertex="1" connectable="0" parent="aFz14AopOHoSZA2ScoIg-12">
          <mxGeometry x="-0.0118" y="1" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-14" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;SimpleGoalChecker&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;dAqinwBf1Nw58gvt5-gC&quot; style=&quot;font-size: 24px;&quot;&gt;1、initialize函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;dAqinwBf1Nw58gvt5-gC&quot;&gt;声明xy_goal_tolerance、yaw_goal_tolerance和stateful参数，最后一个参数表示在到达目标点附近（阈值范围内）后，不再进行位置检查。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;dAqinwBf1Nw58gvt5-gC&quot;&gt;2、getTolerance函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;dAqinwBf1Nw58gvt5-gC&quot;&gt;设置pose_tolerance和vel_tolerance参数，向外部提供当前目标检查的容差参数，可能用于路径跟踪或者其他模块了解当前的容差设置。&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;align=left;" vertex="1" parent="1">
          <mxGeometry x="-76" y="493" width="596" height="220" as="geometry" />
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-17" value="" style="endArrow=classic;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="-216" y="128.41" as="sourcePoint" />
            <mxPoint x="-76" y="128.41" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-18" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;子类&lt;/font&gt;" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];" vertex="1" connectable="0" parent="aFz14AopOHoSZA2ScoIg-17">
          <mxGeometry x="-0.0118" y="1" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-19" value="&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;DWA&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="-76" y="59" width="596" height="414" as="geometry" />
        </mxCell>
        <mxCell id="aFz14AopOHoSZA2ScoIg-20" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;ControllerServer类&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;继承生命周期节点，实例化一个controller action服务，该服务继承自SimpleActionServer类。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;1、构造函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;声明需要用到的参数，并构建了一个局部代价地图的共享指针costmap_ros_&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2、on_configure函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;font color=&quot;#e01b24&quot;&gt;2.1、声明progress_checker插件、goal_checker插件以及控制器插件的名称，根据这些名称，创建插件实例&lt;/font&gt;，比如：&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;progress_checker_type_ = nav2_util::get_plugin_type_param(node, progress_checker_id_);&lt;br&gt;progress_checker_ = progress_checker_loader_.createUniqueInstance(progress_checker_type_);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.2、配置代价地图&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;costmap_ros_-&amp;gt;configure();&lt;br&gt;// 单起一个线程维护地图数据&lt;br&gt;costmap_thread_ = std::make_unique&amp;lt;nav2_util::NodeThread&amp;gt;(costmap_ros_);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.3、创建一些数据的发布和订阅&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;// 将里程计数据的订阅集成为一个类&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;odom_sub_ = std::make_unique&amp;lt;nav_2d_utils::OdomSubscriber&amp;gt;(node);&amp;nbsp; &lt;br&gt;vel_publisher_ = create_publisher&amp;lt;geometry_msgs::msg::Twist&amp;gt;(&quot;cmd_vel&quot;, 1);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.4、创建action服务&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;action_server_ = std::make_unique&amp;lt;ActionServer&amp;gt;(&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; shared_from_this(),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;follow_path&quot;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::bind(&amp;amp;ControllerServer::computeControl, this),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nullptr,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::chrono::milliseconds(500),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; true);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font color=&quot;#e01b24&quot; face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.5、核心函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.5.1、根据FollowPath数据（客户端发送过来的请求），确定请求的控制器、goal_checker是否存在，不存在会使用默认的插件；&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;std::string c_name = action_server_-&amp;gt;get_current_goal()-&amp;gt;controller_id;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::string current_controller;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // 验证请求的控制器是否存在&amp;nbsp; 客户端提供相应的请求数据，这边进行验证&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (findControllerId(c_name, current_controller)) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; current_controller_ = current_controller;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; action_server_-&amp;gt;terminate_current();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.5.2、设置路径&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;这一步中涉及到使用控制器的setPlan函数，局部规划器会对全局路径进行处理，同时，progress_checker_和goal_checker_会进行reset，开启对跟踪过程中的监视。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;setPlannerPath(action_server_-&amp;gt;get_current_goal()-&amp;gt;path);&lt;br&gt;progress_checker_-&amp;gt;reset();&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font color=&quot;#e01b24&quot; face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.5.3、开启while循环，对行为服务器进行监测&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;监测服务是否激活、客户端是否取消了请求，同时等待代价地图是否更新。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;另外，在控制器执行过程中，监测目标位置是否被抢占，若被抢占，会重新执行2.5.1、2.5.2。-&amp;gt; updateGlobalPath()函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;接下来会下发速度指令，这一步主要使用了控制器的computeVelocityCommands函数获取速度，伴随发布的还有跟踪过程中的反馈信息，包括机器人的速度、机器人和目标点之间的剩余距离。做完上述这些操作，会检测机器人是否达到目标点或其附近。-&amp;gt; computeAndPublishVelocity()函数&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;align=left;" vertex="1" parent="1">
          <mxGeometry x="730" y="10" width="1750" height="1600" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
