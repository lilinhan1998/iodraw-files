<mxfile host="www.iodraw.com" agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:136.0) Gecko/20100101 Firefox/136.0" version="24.7.17">
  <diagram name="第 1 页" id="2HKZMpkn9vhKHPOenr94">
    <mxGraphModel dx="1436" dy="837" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1169" pageHeight="827" background="#f6f5f4" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="lgQs_hMFqlDMz63xNxO1-2" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;bt_action_node BtActionNode类&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;1、构造函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;1.1、从黑板中拿到ros2节点&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;node_ = config().blackboard-&amp;gt;template get&amp;lt;rclcpp::Node::SharedPtr&amp;gt;(&quot;node&quot;);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;1.2、创建回调组&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;1.3、创建客户端&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;createActionClient(action_name_);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;主要借用上一步的回调组，创建了一个客户端，对应的服务要视情况而定&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;2、providedBasicPorts函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;创建并返回一个包含基本输入端口的基础列表，允许子类通过参数添加额外的端口，从而复用和拓展端口配置。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;3、tick函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;3.1、判断行为树节点是否处于IDLE状态，若为IDLE状态，需要执行on_tick函数、send_new_goal函数；&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;3.2、目标发送之后，检查服务端是否有响应，需要查看future_goal_handle_的状态，执行is_future_goal_handle_complete函数，若执行成功，向下继续等待服务端反馈的结果；若失败，则抛出异常；&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;3.3、在ros节点运行正常且未收到action服务器的结果时，首先等待结果，执行on_wait_for_result(feedback_)函数；然后，获取当前目标状态：&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;auto goal_status = goal_handle_-&amp;gt;get_status();&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;如果目标正在执行或已被接受，并且有更新，则重新发送新目标，反之不进行目标的发送，执行：&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;callback_group_executor_.spin_some(); 执行回调组执行器，处理挂起的回调，接收新的反馈或结果。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;处理完回调后仍没有收到结果，返回运行状态，让行为树继续等待。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;C7Ens_aQ41u7HcR4j1Ol&quot;&gt;3.4、执行完上述的流程后，若没有返回，就根据服务器返回的结果，执行对应结果的反馈函数。&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;align=left;" parent="1" vertex="1">
          <mxGeometry x="40" y="7" width="700" height="610" as="geometry" />
        </mxCell>
        <mxCell id="lgQs_hMFqlDMz63xNxO1-4" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;&lt;font face=&quot;Times New Roman&quot;&gt;创建回调组&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot;&gt;// rclcpp::CallbackGroupType::MutuallyExclusive表示回调组是互斥的，即同一时间只能有一个回调被执行&lt;br&gt;// false表示手动将回调组添加到节点的执行器中&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;LdTvPaQCf9zctxSOnEdp&quot;&gt;callback_group_ = node_-&amp;gt;create_callback_group(&lt;br&gt;rclcpp::CallbackGroupType::MutuallyExclusive,false);&lt;br&gt;// 将创建的回调组添加到执行器中，并指定使用节点的基本接口&amp;nbsp; callback_group_executor_.add_callback_group(&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;LdTvPaQCf9zctxSOnEdp&quot;&gt;callback_group_, node_-&amp;gt;get_node_base_interface());&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;LdTvPaQCf9zctxSOnEdp&quot;&gt;主要作用：实现动作节点的回调隔离，确保动作客户端的回调不会阻塞主线程；另外，允许行为树节点在等待动作服务器响应的同时保持响应性。这个配置可以保证主行为树循环继续运行，不阻塞ros2节点的其他回调处理。&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;align=left;" parent="1" vertex="1">
          <mxGeometry x="800" y="7" width="360" height="230" as="geometry" />
        </mxCell>
        <mxCell id="u-Zc_Qn_AIVrXr-7xIsA-1" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;&lt;b&gt;is_future_goal_handle_complete函数&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;验证异步发送的动作目标是否被动作服务器接收&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;通过目标发送后已经等待的时间判断是否超时，若目标发送后未超时，最多等待bt_loop_duration_，然后执行callback_group_executor_.spin_until_future_complete函数，在限定时长内等待future_goal_handle_完成&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;&lt;b&gt;send_new_goal函数&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;主要配置ros2 action客户端的send_goal_options，包括结果回调、反馈回调，并配置future_goal_handle_，用于后续检查目标是否被服务器接受。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Times New Roman&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;align=left;" vertex="1" parent="1">
          <mxGeometry x="800" y="244" width="360" height="250" as="geometry" />
        </mxCell>
        <mxCell id="u-Zc_Qn_AIVrXr-7xIsA-2" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 14px;&quot;&gt;should_cancel_goal函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;是否取消当前正在执行的动作目标，核心逻辑：当行为树节点处于运行状态且目标尚未完成时，需要主动取消目标。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;在halt函数中使用。&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;align=left;" vertex="1" parent="1">
          <mxGeometry x="800" y="504" width="360" height="113" as="geometry" />
        </mxCell>
        <mxCell id="u-Zc_Qn_AIVrXr-7xIsA-4" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;navigate_to_pose_action NavigateToPoseAction类&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font size=&quot;3&quot; face=&quot;Times New Roman&quot;&gt;BtActionNode的派生类，重写了on_tick函数和providedPorts函数，on_tick函数获取了goal中的目标点信息和behavior_tree XML文件名；&lt;/font&gt;&lt;font size=&quot;3&quot; face=&quot;Times New Roman&quot;&gt;providedPorts函数则设置了上述的两个inputPort。&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;align=left;" vertex="1" parent="1">
          <mxGeometry x="40" y="640" width="700" height="180" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
