{"root":{"data":{"id":"d9un1fdncq2o","created":1747099371979,"text":"C++多线程同步"},"children":[{"data":{"id":"d9un1uaeor9c","created":1747099404434,"text":"互斥锁"},"children":[{"data":{"id":"d9un2j2egvls","created":1747099458370,"text":"多个线程想要访问同一资源时，可能会发生抢资源的问题","layout_right_offset":{"x":-12,"y":-1}},"children":[]},{"data":{"id":"d9un2k8xmpds","created":1747099460942,"text":"互斥锁保证某个资源在任意时间点只能被一个线程访问","layout_right_offset":{"x":-10,"y":47}},"children":[]},{"data":{"id":"d9un4qjzph4w","created":1747099631399,"text":"当一个人进入房间后锁上门，直到他出来再把门打开，别人才能进来。每次只能一个人操作共享资源。","layout_right_offset":{"x":-15,"y":-49}},"children":[]}]},{"data":{"id":"d9unkedru41s","created":1747100858729,"text":"条件变量","layout_right_offset":{"x":-16,"y":2}},"children":[{"data":{"id":"d9unkyr6kjk0","created":1747100903075,"text":"信号灯，让线程等待。比如两个线程，一个线程等着某个条件成立才会继续运行。通过条件变量，线程可以等待特定的事件发生再继续执行。"},"children":[]},{"data":{"id":"d9unkzsmk3k0","created":1747100905339,"text":"适用场景\n条件变量适合那些需要线程之间进行协调的场景，比如生产者-消费者模型、任务等待等。\n当一个线程在等待某个条件（如数据可用）时，另一个线程可以通过条件变量发送信号通知它继续执行。"},"children":[]}]},{"data":{"id":"d9uo91y2asqo","created":1747102790761,"text":"读写锁","layout_right_offset":{"x":18,"y":46}},"children":[{"data":{"id":"d9uo9c0ckidc","created":1747102812667,"text":"多个线程可以同时读取数据，但在写数据时，必须确保没有其他线程正在读取或写入。\n读写锁允许多个读线程同时访问，但写线程需要独占资源。"},"children":[]}]},{"data":{"id":"d9uo73mpq1hc","created":1747102637700,"text":"信号量","layout_right_offset":{"x":12,"y":46}},"children":[{"data":{"id":"d9uo7padzpq8","created":1747102684844,"text":"用来控制同时访问资源的线程数量。\n它就像停车场的限流措施，只允许一定数量的车进入停车场，车多了就得等。"},"children":[]}]},{"data":{"id":"d9uoaefjpurk","created":1747102896304,"text":"原子操作","layout_right_offset":{"x":4,"y":112}},"children":[{"data":{"id":"d9uoamr61zi8","created":1747102914421,"text":"一种轻量级的同步机制，用于避免多个线程同时修改共享资源时引发的数据竞争。\n所谓“原子”就是不可分割的操作，要么全部完成，要么不做任何改变。这样就可以避免多个线程同时修改同一个变量的冲突。"},"children":[]}]}]},"template":"right","theme":"fresh-blue","version":"1.4.43"}