<mxfile host="www.iodraw.com" agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:136.0) Gecko/20100101 Firefox/136.0" version="24.7.17">
  <diagram name="第 1 页" id="tff7HQ_WmHDC0ZlMoCYw">
    <mxGraphModel dx="3033" dy="1265" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="IF1k4MAVBQgVod45AsEC-1" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;行为树导航器&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;继承自生命周期节点，和planner、controller一致。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;除了包含生命周期节点常规的函数外，定义了nav2_bt_navigator::Navigator&amp;lt;nav2_msgs::action::NavigateToPose&amp;gt;导航器，还有std::shared_ptr&amp;lt;nav2_util::OdomSmoother&amp;gt; odom_smoother_里程计平滑器。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;先来看看navigator.hpp中的Navigator类。&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#f5f5f5;strokeColor=#666666;gradientColor=#b3b3b3;" parent="1" vertex="1">
          <mxGeometry x="10" y="20" width="620" height="170" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-15" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="01SrSEuu2r-TH4prvu8M-1" target="01SrSEuu2r-TH4prvu8M-10" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="-50" y="630" />
              <mxPoint x="-50" y="1135" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-1" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;Navigator类&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;using Ptr = std::shared_ptr&amp;lt;nav2_bt_navigator::Navigator&amp;lt;ActionT&amp;gt;&amp;gt;;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1、on_configure函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.1、函数参数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;rclcpp_lifecycle::LifecycleNode::WeakPtr parent_node,&lt;br&gt;const std::vector&amp;lt;std::string&amp;gt; &amp;amp; plugin_lib_names,&lt;br&gt;const FeedbackUtils &amp;amp; feedback_utils,&lt;br&gt;nav2_bt_navigator::NavigatorMuxer * plugin_muxer,&lt;br&gt;std::shared_ptr&amp;lt;nav2_util::OdomSmoother&amp;gt; odom_smoother&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.2、getDefaultBTFilepath函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;实现的是子类的函数，获取行为树XML文件（字符串类型）&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.3、实例化行为树action服务器&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;bt_action_server_ = std::make_unique&amp;lt;nav2_behavior_tree::BtActionServer&amp;lt;ActionT&amp;gt;&amp;gt;(&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; node,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // 调用派生类中的函数&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; getName(),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; plugin_lib_names,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; default_bt_xml_filename,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::bind(&amp;amp;Navigator::onGoalReceived, this, std::placeholders::_1),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::bind(&amp;amp;Navigator::onLoop, this),&amp;nbsp; // 可以用来发布action的feedback信息&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::bind(&amp;amp;Navigator::onPreempt, this, std::placeholders::_1),&amp;nbsp; // 占用&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; std::bind(&amp;amp;Navigator::onCompletion, this, std::placeholders::_1, &lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;std::placeholders::_2));&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.4、黑板变量获取&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;获取&lt;/font&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;bt_action_server_中的黑板，并在黑板上设置tf、initial_pose_received布尔变量、恢复次数以及里程计平滑器。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1">
          <mxGeometry x="10" y="240" width="620" height="780" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-2" value="&lt;div align=&quot;left&quot; style=&quot;font-family: &amp;quot;Droid Sans Mono&amp;quot;, &amp;quot;monospace&amp;quot;, monospace; font-weight: normal; line-height: 24px; white-space: pre;&quot;&gt;&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;BtActionServer类&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;没有继承任何类，在构造函数中拿到ros节点，并声明了一些参数。&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Times New Roman&quot;&gt;1、on_configure函数关键步骤&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.1、client_node_ = std::make_shared&amp;lt;rclcpp::Node&amp;gt;(&quot;_&quot;, options);  单独创建一个节点，管理行为树功能模块，给定的参数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;可以防止命令冲突；&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.2、初始化一个类型为simple_action_sever的action服务&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;action_server_ = std::make_shared&amp;lt;ActionServer&amp;gt;(&lt;br&gt;    node-&amp;gt;get_node_base_interface(),&lt;br&gt;    node-&amp;gt;get_node_clock_interface(),&lt;br&gt;    node-&amp;gt;get_node_logging_interface(),&lt;br&gt;    node-&amp;gt;get_node_waitables_interface(),&lt;br&gt;    action_name_, std::bind(&amp;amp;BtActionServer&amp;lt;ActionT&amp;gt;::executeCallback, this));&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#e01b24&quot; face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;using ActionServer = nav2_util::SimpleActionServer&amp;lt;ActionT&amp;gt;;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.3、创建行为树引擎实例&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;bt_负责解析行为树XML文件、加载节点插件、执行行为树逻辑的核心引擎&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;参数：行为树节点插件库（&lt;/font&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;动态链接库&lt;/font&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;）&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;bt_ = std::make_unique&amp;lt;nav2_behavior_tree::BehaviorTreeEngine&amp;gt;(plugin_lib_names_);&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1.4、创建黑板变量&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;blackboard_ = BT::Blackboard::create();&lt;br&gt;blackboard_-&amp;gt;set&amp;lt;rclcpp::Node::SharedPtr&amp;gt;(&quot;node&quot;, client_node_);  &lt;br&gt;blackboard_-&amp;gt;set&amp;lt;std::chrono::milliseconds&amp;gt;(&quot;server_timeout&quot;, default_server_timeout_);  &lt;br&gt;blackboard_-&amp;gt;set&amp;lt;std::chrono::milliseconds&amp;gt;(&quot;bt_loop_duration&quot;, bt_loop_duration_);&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;2、on_activate函数关键步骤&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;2.1、加载行为树，执行loadBehaviorTree函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;若行为树加载失败，整个函数返回false&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;2.2、激活&lt;/font&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;action_server_&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3、executeCallback函数关键步骤（重要）&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.1、检测传入的目标是否合法&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.2、定义取消条件检查函数（用于行为树执行中判断是否应该取消任务）&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.3、定义循环回调函数，每次行为树迭代执行&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;auto on_loop = [&amp;amp;]() {&lt;br&gt;      // &lt;font color=&quot;#e01b24&quot;&gt;处理抢占请求：如果有新目标到达，调用用户回调处理抢占逻辑&lt;/font&gt;&lt;br&gt;      if (action_server_-&amp;gt;is_preempt_requested() &amp;amp;&amp;amp; on_preempt_callback_) {&lt;br&gt;        on_preempt_callback_(action_server_-&amp;gt;get_pending_goal());&lt;br&gt;      }&lt;br&gt;      topic_logger_-&amp;gt;flush();  // 刷新行为树日志到ROS话题&lt;br&gt;      on_loop_callback_(); // &lt;font color=&quot;#e01b24&quot;&gt;执行用户定义的循环逻辑  该函数同样是初始化BtActionServer时作为参数传入&lt;/font&gt;&lt;br&gt;    };&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.4、行为树运行&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;nav2_behavior_tree::BtStatus rc = bt_-&amp;gt;run(&amp;amp;tree_, on_loop, is_canceling, bt_loop_duration_);&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.5、停止所有行为树节点运行，确保无残留运行状态&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;// &lt;font color=&quot;#e01b24&quot;&gt;显式调用haltAllActions函数，递归遍历整棵树，对每个处于 RUNNING 状态的节点调用 halt() 方法&lt;/font&gt;&lt;br&gt;// &lt;font color=&quot;#e01b24&quot;&gt;是资源管理和状态安全的必要措施&lt;/font&gt;&lt;br&gt;bt_-&amp;gt;haltAllActions(tree_.rootNode());&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.6、生成动作结果并调用completion回调函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3.7、根据行为树执行后的状态处理对应的action结果&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;align=left;" parent="1" vertex="1">
          <mxGeometry x="710" y="240" width="940" height="1290" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-20" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.702;exitY=0.341;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="01SrSEuu2r-TH4prvu8M-2" target="01SrSEuu2r-TH4prvu8M-19" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-3" value="" style="endArrow=classic;html=1;rounded=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;" parent="1" target="IF1k4MAVBQgVod45AsEC-1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="320" y="240" as="sourcePoint" />
            <mxPoint x="370" y="190" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-5" value="" style="endArrow=classic;html=1;rounded=0;exitX=-0.001;exitY=0.536;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0.995;entryY=0.152;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="710.4500000000003" y="600.9200000000001" as="sourcePoint" />
            <mxPoint x="621.8999999999996" y="601.56" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-6" value="&lt;div align=&quot;left&quot; style=&quot;font-family: &amp;quot;Droid Sans Mono&amp;quot;, &amp;quot;monospace&amp;quot;, monospace; font-weight: normal; line-height: 24px; white-space: pre;&quot;&gt;&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;NavigatorMuxer类&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;控制BT导航器的状态，同一时间只允许一个插件被处理&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;主要实现导航任务互斥管理机制，&lt;font color=&quot;#e01b24&quot;&gt;通过互斥锁确保同一时刻只有一个导航器可以&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;font color=&quot;#e01b24&quot;&gt;修改状态&lt;/font&gt;，避免多个导航器同时修改路径规划等关键资源。核心作用是导航系统&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;的交通信号灯。&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1、构造函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;初始化current_navigator_为空，表明初始状态下没有导航器运行&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;2、isNavigating函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;检测当前是否有导航器在运行&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3、startNavigating函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;声明某个导航器开始执行任务&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;4、stopNavigating函数&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;声明某个导航器结束任务&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;成员变量mutex_用于保护对current_navigator_的并发访问，防止多线程竞争。&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1">
          <mxGeometry x="-710" y="240" width="640" height="380" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-7" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;loadBehaviorTree函数&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;传入参数：行为树XML文件名称/路径，bt_xml_filename&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;1、检查行为树XML文件/路径的合法性&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;2、创建行为树实例&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;// &lt;font color=&quot;#e01b24&quot;&gt;创建行为树实例，此时blackboard_stack中至少有一块根黑板blackboard_&lt;/font&gt;&lt;br&gt;tree_ = bt_-&amp;gt;createTreeFromText(xml_string, blackboard_);&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;// &lt;font color=&quot;#e01b24&quot;&gt;确保行为树的所有层级均能直接访问必要的全局配置&lt;/font&gt;&lt;br&gt;for (auto &amp;amp; blackboard : tree_.blackboard_stack) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // 这些参数均是全局性参数，需要在所有作用域中可访问&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; blackboard-&amp;gt;set&amp;lt;rclcpp::Node::SharedPtr&amp;gt;(&quot;node&quot;, client_node_);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; blackboard-&amp;gt;set&amp;lt;std::chrono::milliseconds&amp;gt;(&quot;server_timeout&quot;, &lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;default_server_timeout_);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; blackboard-&amp;gt;set&amp;lt;std::chrono::milliseconds&amp;gt;(&quot;bt_loop_duration&quot;, &lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;bt_loop_duration_);&lt;br&gt;}&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;3、启用日志监视器&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 18px;&quot;&gt;topic_logger_ = std::make_unique&amp;lt;RosTopicLogger&amp;gt;(client_node_, tree_);&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="1720" y="1100" width="730" height="430" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-8" value="" style="endArrow=classic;html=1;rounded=0;entryX=0.005;entryY=0.721;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1080" y="885" as="sourcePoint" />
            <mxPoint x="1723.6500000000005" y="1409.0300000000002" as="targetPoint" />
            <Array as="points">
              <mxPoint x="1680" y="885" />
              <mxPoint x="1680" y="1409" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-9" value="" style="endArrow=classic;html=1;rounded=0;exitX=-0.001;exitY=0.536;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0.995;entryY=0.152;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="-78.55000000000064" y="440.6399999999999" as="sourcePoint" />
            <mxPoint x="10" y="440" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-10" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;&lt;b&gt;navigate_to_pose&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;1、configure函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;基类的on_configure函数统一管理服务端，派生类的configure函数则通过创建的客户端调用自身的服务。&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;1.1、声明参数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;goal_blackboard_is_（导航目标位姿键名）、path_blackboard_id_（全局路径键名，用于路径跟踪）&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;1.2、创建navigate_to_pose客户端&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;self_client_ = rclcpp_action::create_client&amp;lt;ActionT&amp;gt;(node, getName());&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;1.3、订阅目标点&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;话题名：“goal_pose”&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;回调函数：onGoalPoseReceived，客户端在这里会发送目标请求&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2、goalReceived函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.1、加载行为树&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;bt_action_server_-&amp;gt;loadBehaviorTree(bt_xml_filename)&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2.2、初始化目标点，执行initializeGoalPose函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;3、initializeGoalPose(ActionT::Goal::ConstSharedPtr goal)函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;通过bt_action_server_中的黑板，设置number_recoveries和goal_blackboard_id_值&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;4、onLoop函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;发布action服务在执行过程中的反馈信息&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;5、onPreempt函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;该函数会处理抢占目标点的流程&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;align=left;" parent="1" vertex="1">
          <mxGeometry x="-710" y="730" width="640" height="810" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-16" value="&amp;nbsp;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-660" y="1050" width="40" height="40" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-17" value="&amp;nbsp;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1440" y="810" width="40" height="40" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-18" value="&amp;nbsp;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1060" y="400" width="40" height="40" as="geometry" />
        </mxCell>
        <mxCell id="01SrSEuu2r-TH4prvu8M-19" value="&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;BehaviorTreeEngine类&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;提供行为树（Behavior Tree, BT）的加载、执行、中断管理功能，用于协调导航任务中的复杂决策流程（如路径规划、避障、恢复行为）&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;1、构造函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;根据参数plugin_libraries，注册插件到行为树工厂&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;2、run函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;通过固定的频率，触发行为树节点，执行相关功能&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;先判断行为树是否取消执行，再触发根节点执行行为树，然后上onLoop函数，最后按照一定的频率开始休眠，判断执行结果成功与否&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;3、haltAllActions函数&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;终止执行行为树所有节点&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;首先递归终止根节点，再全树显式遍历终止节点&lt;/font&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 24px;&quot;&gt;// &lt;font color=&quot;#e01b24&quot;&gt;深度优先遍历行为树所有节点 对每个节点应用visitor，确保没有遗漏&lt;/font&gt;&lt;br&gt;BT::applyRecursiveVisitor(root_node, visitor);&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;align=left;" parent="1" vertex="1">
          <mxGeometry x="1720" y="240" width="730" height="490" as="geometry" />
        </mxCell>
        <mxCell id="ygTPcM5sR8ohJO3-vTP5-1" value="&lt;div align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot; face=&quot;Times New Roman&quot;&gt;bt_action_server直接对应导航任务，设定导航模式（如navigate_to_pose），以此为基础，会创建对应的action服务，供外界使用&lt;/font&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;align=left;" vertex="1" parent="1">
          <mxGeometry x="-710" y="1600" width="3160" height="90" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
